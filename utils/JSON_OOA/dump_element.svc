public service JSON::dump(json_element: in JSONElement) return anonymous string is
begin

  case json_element.kind is

    when Object =>
      
      declare
      json_fields: sequence of string;
      begin
        for k in json_element.data.obj'keys loop
          // each value is stored as a JSON string -- simply append it
          json_fields := json_fields & ("\"" & k & "\"" & ":" & json_element.data.obj[k]);
        end loop;
        return "{" & Strings::join(json_fields, ",") & "}";
      end;

    when Array =>

      // each value is stored as a JSON string -- simply append it
      return "[" & Strings::join(json_element.data.arr, ",") & "]";

    when String =>

      // output as an escaped string with enclosing quotes
      declare
        output_string: string := json_element.data.str;
      begin
        output_string := Strings::replace_all(output_string, "\"", "\\\"");
        output_string := Strings::replace_all(output_string, "\\", "\\\\");
        output_string := Strings::replace_all(output_string, "\b", "\\b");
        output_string := Strings::replace_all(output_string, "\f", "\\f");
        output_string := Strings::replace_all(output_string, "\n", "\\n");
        output_string := Strings::replace_all(output_string, "\r", "\\r");
        output_string := Strings::replace_all(output_string, "\t", "\\t");
        return "\"" & output_string & "\"";
      end;

    when Real =>

      return json_element.data.real'image;

    when Integer =>

      return json_element.data.int'image;

    when Boolean =>

      if json_element.data.bool then
        return "true";
      else
        return "false";
      end if;

    when Null =>

      return "null";

    when others =>

      raise program_error("Failed to dump unknown JSON element type");

  end case;

end service;

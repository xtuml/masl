# base image
FROM ubuntu:16.04 AS base-stage

# set up environment variables
ENV LD_LIBRARY_PATH=/opt/masl/lib:/opt/poco/lib
ENV JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Djava.libary.path=${LD_LIBRARY_PATH}"

# install prerequisites
RUN apt-get update && apt-get install -y gcc g++ pkg-config cmake ninja-build libsqlite3-dev libboost-all-dev libssl-dev uuid-dev

# build sources
FROM base-stage AS build-stage

# install prerequisites
RUN apt-get install -y gradle openjdk-8-jdk

# install poco
ADD http://pocoproject.org/releases/poco-1.7.3/poco-1.7.3-all.tar.gz poco-1.7.3-all.tar.gz
RUN tar xzf poco-1.7.3-all.tar.gz
RUN /bin/bash -c "cd poco-1.7.3-all && cmake . -G Ninja -DCMAKE_INSTALL_PREFIX=/opt/poco"
RUN /bin/bash -c "cd poco-1.7.3-all && ninja install"

# copy the MASL source code
COPY core-cpp /root/masl/core-cpp
COPY core-java /root/masl/core-java
COPY utils /root/masl/utils
COPY CMakeLists.txt /root/masl/CMakeLists.txt

# build MASL
RUN /bin/bash -c "export JAVA_HOME=\$(dirname \$(dirname \$(dirname \$(readlink -f \$(which java))))) && cd /root/masl && cmake . -G Ninja -DCMAKE_INSTALL_PREFIX=/opt/masl"
RUN mkdir -p /root/masl/core-java/install/masl-core/lib
RUN /bin/bash -c "cd /root/masl && ninja install"

# install stage
FROM base-stage AS install-stage

# install openjdk-11
# this must be done after building the compiler itself because there are some
# incompatibilities with OpenJDK11 during the build only
ARG ARCH=linux-x64
ADD https://aka.ms/download-jdk/microsoft-jdk-11.0.14.9.1-$ARCH.tar.gz /scratch/openjdk-11
RUN mkdir -p /usr/lib/jvm && tar xzf /scratch/openjdk-11 -C /usr/lib/jvm/
ADD docker/install-java.sh /tmp/install-java.sh
RUN /bin/bash /tmp/install-java.sh

# create workspace
WORKDIR /root

# copy the libs and bins
COPY --from=build-stage /opt/masl /opt/masl
COPY --from=build-stage /opt/poco /opt/poco
